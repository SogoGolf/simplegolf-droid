package com.sogo.golf.msl.data.local.database.entities

import androidx.room.Entity
import androidx.room.PrimaryKey
import androidx.room.TypeConverters
import com.sogo.golf.msl.domain.model.Round
import com.sogo.golf.msl.domain.model.StateInfo
import com.sogo.golf.msl.domain.model.HoleScore
import com.sogo.golf.msl.domain.model.PlayingPartnerRound
import com.sogo.golf.msl.domain.model.MslMetaData
import org.threeten.bp.LocalDateTime

@Entity(tableName = "rounds")
@TypeConverters(RoundConverters::class)
data class RoundEntity(
    @PrimaryKey
    val id: String,
    val uuid: String?,
    val entityId: String?,
    val roundPlayedOff: Double?,
    val dailyHandicap: Double?,
    val golfLinkHandicap: Double?,
    val golflinkNo: String?,
    val scorecardUrl: String?,
    val roundRefCode: String?,
    val roundDate: LocalDateTime?,
    val roundType: String,
    val startTime: LocalDateTime?,
    val finishTime: LocalDateTime?,
    val scratchRating: Float?,
    val slopeRating: Float?,
    val submittedTime: LocalDateTime?,
    val compScoreTotal: Int?,
    val whsFrontScoreStableford: Int?,
    val whsBackScoreStableford: Int?,
    val whsFrontScorePar: Int?,
    val whsBackScorePar: Int?,
    val whsFrontScoreStroke: Int?,
    val whsBackScoreStroke: Int?,
    val whsFrontScoreMaximumScore: Int?,
    val whsBackScoreMaximumScore: Int?,
    val roundApprovedBy: String?,
    val comment: String?,
    val createdDate: LocalDateTime?,
    val updateDate: String?,
    val updateUserId: String?,
    val courseId: String?,
    val courseUuid: String?,
    val isClubSubmitted: Boolean?,
    val isSubmitted: Boolean?,
    val isMarkedForReview: Boolean?,
    val isApproved: Boolean?,
    val teeColor: String?,
    val isClubComp: Boolean?,
    val isDeleted: Boolean?,
    val isAbandoned: Boolean?,
    val clubId: String?,
    val clubUuid: String?,
    val golferId: String?,
    val golferGender: String?,
    val golferEmail: String?,
    val golferFirstName: String?,
    val golferLastName: String?,
    val golferGLNumber: String?,
    val golferImageUrl: String?,
    val clubState: StateInfo?,
    val clubName: String?,
    val markerFirstName: String?,
    val markerLastName: String?,
    val markerEmail: String?,
    val markerGLNumber: String?,
    val compType: String?,
    val holeScores: List<HoleScore>,
    val sogoAppVersion: String?,
    val transactionId: String?,
    val playingPartnerRound: PlayingPartnerRound?,
    val roundApprovalSignatureUrl: String?,
    val thirdPartyScorecardId: String?,
    val mslMetaData: MslMetaData?,
    val lastUpdated: Long = System.currentTimeMillis(),
    val isSynced: Boolean = false
) {
    fun toDomainModel(): Round {
        return Round(
            id = id,
            uuid = uuid,
            entityId = entityId,
            roundPlayedOff = roundPlayedOff,
            dailyHandicap = dailyHandicap,
            golfLinkHandicap = golfLinkHandicap,
            golflinkNo = golflinkNo,
            scorecardUrl = scorecardUrl,
            roundRefCode = roundRefCode,
            roundDate = roundDate,
            roundType = roundType,
            startTime = startTime,
            finishTime = finishTime,
            scratchRating = scratchRating,
            slopeRating = slopeRating,
            submittedTime = submittedTime,
            compScoreTotal = compScoreTotal,
            whsFrontScoreStableford = whsFrontScoreStableford,
            whsBackScoreStableford = whsBackScoreStableford,
            whsFrontScorePar = whsFrontScorePar,
            whsBackScorePar = whsBackScorePar,
            whsFrontScoreStroke = whsFrontScoreStroke,
            whsBackScoreStroke = whsBackScoreStroke,
            whsFrontScoreMaximumScore = whsFrontScoreMaximumScore,
            whsBackScoreMaximumScore = whsBackScoreMaximumScore,
            roundApprovedBy = roundApprovedBy,
            comment = comment,
            createdDate = createdDate,
            updateDate = updateDate,
            updateUserId = updateUserId,
            courseId = courseId,
            courseUuid = courseUuid,
            isClubSubmitted = isClubSubmitted,
            isSubmitted = isSubmitted,
            isMarkedForReview = isMarkedForReview,
            isApproved = isApproved,
            teeColor = teeColor,
            isClubComp = isClubComp,
            isDeleted = isDeleted,
            isAbandoned = isAbandoned,
            clubId = clubId,
            clubUuid = clubUuid,
            golferId = golferId,
            golferGender = golferGender,
            golferEmail = golferEmail,
            golferFirstName = golferFirstName,
            golferLastName = golferLastName,
            golferGLNumber = golferGLNumber,
            golferImageUrl = golferImageUrl,
            clubState = clubState,
            clubName = clubName,
            markerFirstName = markerFirstName,
            markerLastName = markerLastName,
            markerEmail = markerEmail,
            markerGLNumber = markerGLNumber,
            compType = compType,
            holeScores = holeScores,
            sogoAppVersion = sogoAppVersion,
            transactionId = transactionId,
            playingPartnerRound = playingPartnerRound,
            roundApprovalSignatureUrl = roundApprovalSignatureUrl,
            thirdPartyScorecardId = thirdPartyScorecardId,
            mslMetaData = mslMetaData,
            lastUpdated = lastUpdated,
            isSynced = isSynced
        )
    }

    companion object {
        fun fromDomainModel(round: Round): RoundEntity {
            return RoundEntity(
                id = round.id,
                uuid = round.uuid,
                entityId = round.entityId,
                roundPlayedOff = round.roundPlayedOff,
                dailyHandicap = round.dailyHandicap,
                golfLinkHandicap = round.golfLinkHandicap,
                golflinkNo = round.golflinkNo,
                scorecardUrl = round.scorecardUrl,
                roundRefCode = round.roundRefCode,
                roundDate = round.roundDate,
                roundType = round.roundType,
                startTime = round.startTime,
                finishTime = round.finishTime,
                scratchRating = round.scratchRating,
                slopeRating = round.slopeRating,
                submittedTime = round.submittedTime,
                compScoreTotal = round.compScoreTotal,
                whsFrontScoreStableford = round.whsFrontScoreStableford,
                whsBackScoreStableford = round.whsBackScoreStableford,
                whsFrontScorePar = round.whsFrontScorePar,
                whsBackScorePar = round.whsBackScorePar,
                whsFrontScoreStroke = round.whsFrontScoreStroke,
                whsBackScoreStroke = round.whsBackScoreStroke,
                whsFrontScoreMaximumScore = round.whsFrontScoreMaximumScore,
                whsBackScoreMaximumScore = round.whsBackScoreMaximumScore,
                roundApprovedBy = round.roundApprovedBy,
                comment = round.comment,
                createdDate = round.createdDate,
                updateDate = round.updateDate,
                updateUserId = round.updateUserId,
                courseId = round.courseId,
                courseUuid = round.courseUuid,
                isClubSubmitted = round.isClubSubmitted,
                isSubmitted = round.isSubmitted,
                isMarkedForReview = round.isMarkedForReview,
                isApproved = round.isApproved,
                teeColor = round.teeColor,
                isClubComp = round.isClubComp,
                isDeleted = round.isDeleted,
                isAbandoned = round.isAbandoned,
                clubId = round.clubId,
                clubUuid = round.clubUuid,
                golferId = round.golferId,
                golferGender = round.golferGender,
                golferEmail = round.golferEmail,
                golferFirstName = round.golferFirstName,
                golferLastName = round.golferLastName,
                golferGLNumber = round.golferGLNumber,
                golferImageUrl = round.golferImageUrl,
                clubState = round.clubState,
                clubName = round.clubName,
                markerFirstName = round.markerFirstName,
                markerLastName = round.markerLastName,
                markerEmail = round.markerEmail,
                markerGLNumber = round.markerGLNumber,
                compType = round.compType,
                holeScores = round.holeScores,
                sogoAppVersion = round.sogoAppVersion,
                transactionId = round.transactionId,
                playingPartnerRound = round.playingPartnerRound,
                roundApprovalSignatureUrl = round.roundApprovalSignatureUrl,
                thirdPartyScorecardId = round.thirdPartyScorecardId,
                mslMetaData = round.mslMetaData,
                lastUpdated = round.lastUpdated,
                isSynced = round.isSynced
            )
        }
    }
}
